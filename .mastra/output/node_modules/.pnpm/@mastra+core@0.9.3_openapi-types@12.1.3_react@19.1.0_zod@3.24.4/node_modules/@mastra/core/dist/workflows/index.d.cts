import { az as VariableReference, aG as StepResult, K as Step, L as Workflow, F as Agent, aJ as WorkflowContext, b3 as ToolsInput, a as Mastra, au as StepAction, aI as WorkflowRunResult } from '../base-VMWGZau0.cjs';
export { aB as ActionContext, aA as BaseCondition, aP as DependencyCheckOutput, aW as ExtractSchemaFromStep, aZ as ExtractSchemaType, aX as ExtractStepResult, a_ as PathsToStringProps, aM as ResolverFunctionInput, aN as ResolverFunctionOutput, ay as RetryConfig, aE as StepCondition, aF as StepConfig, aD as StepDef, at as StepExecutionContext, ax as StepGraph, aV as StepId, aY as StepInputType, aw as StepNode, aQ as StepResolverOutput, av as StepVariableType, aH as StepsRecord, aO as SubscriberFunctionOutput, aC as WhenConditionReturnValue, aS as WorkflowActionParams, aT as WorkflowActions, aR as WorkflowActors, aL as WorkflowEvent, aK as WorkflowLogMessage, O as WorkflowOptions, b0 as WorkflowResumeResult, a$ as WorkflowRunState, aU as WorkflowState } from '../base-VMWGZau0.cjs';
import { z } from 'zod';
import { a as Metric } from '../types-BtMyV38I.cjs';
import { L as Logger } from '../index-CquI0inB.cjs';
import '../base-D9APQt4V.cjs';
import 'ai';
import 'sift';
import 'json-schema';
import '../runtime-context/index.cjs';
import '@opentelemetry/api';
import 'xstate';
import 'node:events';
import '../vector/index.cjs';
import '../vector/filter/index.cjs';
import 'stream';
import 'pino';
import '@opentelemetry/sdk-trace-base';
import '../tts/index.cjs';
import 'events';
import '../deployer/index.cjs';
import '../bundler/index.cjs';
import 'hono';
import 'hono/cors';
import 'hono-openapi';
import 'ai/test';

declare function isErrorEvent(stateEvent: any): stateEvent is {
    type: `xstate.error.actor.${string}`;
    error: Error;
};
declare function isTransitionEvent(stateEvent: any): stateEvent is {
    type: `xstate.done.actor.${string}`;
    output?: unknown;
};
declare function isVariableReference(value: any): value is VariableReference<any, any>;
declare function getStepResult(result?: StepResult<any>): any;
declare function getSuspendedPaths({ value, path, suspendedPaths, }: {
    value: string | Record<string, string>;
    path: string;
    suspendedPaths: Set<string>;
}): void;
declare function isFinalState(status: string): boolean;
declare function isLimboState(status: string): boolean;
declare function recursivelyCheckForFinalState({ value, suspendedPaths, path, }: {
    value: string | Record<string, string>;
    suspendedPaths: Set<string>;
    path: string;
}): boolean;
declare function getActivePathsAndStatus(value: Record<string, any>): Array<{
    stepPath: string[];
    stepId: string;
    status: string;
}>;
declare function mergeChildValue(startStepId: string, parent: Record<string, any>, child: Record<string, any>): Record<string, any>;
declare const updateStepInHierarchy: (value: Record<string, any>, targetStepId: string) => Record<string, any>;
declare function getResultActivePaths(state: {
    value: Record<string, string>;
    context: {
        steps: Record<string, any>;
    };
}): Map<string, {
    status: string;
    suspendPayload?: any;
    stepPath: string[];
}>;
declare function isWorkflow(step: Step<any, any, any, any> | Workflow<any, any, any, any> | Agent<any, any, any>): step is Workflow<any, any, any, any>;
declare function isAgent(step: Step<any, any, any, any> | Agent<any, any, any> | Workflow<any, any, any, any>): step is Agent<any, any, any>;
declare function resolveVariables({ runId, logger, variables, context, }: {
    runId: string;
    logger: Logger;
    variables: Record<string, VariableReference<any, any>>;
    context: WorkflowContext;
}): Record<string, any>;
declare function agentToStep<TAgentId extends string = string, TTools extends ToolsInput = ToolsInput, TMetrics extends Record<string, Metric> = Record<string, Metric>>(agent: Agent<TAgentId, TTools, TMetrics>, { mastra }?: {
    mastra?: Mastra;
}): StepAction<TAgentId, z.ZodObject<{
    prompt: z.ZodString;
}>, z.ZodObject<{
    text: z.ZodString;
}>, any>;
declare function workflowToStep<TSteps extends Step<any, any, any, any>[], TStepId extends string = any, TTriggerSchema extends z.ZodObject<any> = any, TResultSchema extends z.ZodObject<any> = any>(workflow: Workflow<TSteps, TStepId, TTriggerSchema, TResultSchema>, { mastra }: {
    mastra?: Mastra;
}): StepAction<TStepId, TTriggerSchema, z.ZodType<WorkflowRunResult<TTriggerSchema, TSteps, TResultSchema>>, any>;
declare function isConditionalKey(key: string): boolean;

export { Step, StepAction, StepResult, VariableReference, Workflow, WorkflowContext, WorkflowRunResult, agentToStep, getActivePathsAndStatus, getResultActivePaths, getStepResult, getSuspendedPaths, isAgent, isConditionalKey, isErrorEvent, isFinalState, isLimboState, isTransitionEvent, isVariableReference, isWorkflow, mergeChildValue, recursivelyCheckForFinalState, resolveVariables, updateStepInHierarchy, workflowToStep };
